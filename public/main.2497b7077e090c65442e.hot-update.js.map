{"version":3,"file":"main.2497b7077e090c65442e.hot-update.js","sources":["webpack:///src/components/Submission.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { updateCurrentEvent, postEvent, setCurrentEvent, editEvent } from '../redux';\nimport { connect } from 'react-redux';\nimport { getMonthName, getDate } from '../utils';\n\nclass Submission extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n  }\n\n  handleChange(evt) {\n    this.props.updateCurrentEvent({[evt.target.name]: evt.target.value});\n  }\n\n  handleSubmit(currentEvent, evt) {\n    evt.preventDefault();\n    currentEvent.date = getDate(currentEvent.month, currentEvent.day);\n\n    this.props.closeSubmit();\n    this.props.postEvent(currentEvent);\n    this.props.setCurrentEvent({});\n  }\n\n  handleUpdate(currentEvent, evt) {\n    const { id, description, startTime24, endTime24} = currentEvent;\n    evt.preventDefault();\n    this.props.closeSubmit();\n    this.props.editEvent(id, { description, startTime24, endTime24 });\n    this.props.setCurrentEvent({});\n  }\n\n  handleCancel(evt) {\n    evt.preventDefault();\n    this.props.closeSubmit();\n    this.props.setCurrentEvent({});\n  }\n\n  render() {\n    let submissionType;\n    let buttonText;\n    let currentEvent = this.props.currentEvent;\n    if (currentEvent.id) {\n      submissionType = 'Edit Event';\n      buttonText = 'Update';\n    } else {\n      submissionType = 'Create New Event';\n      buttonText = 'Submit';\n    }\n\n    let {month, day, startTime24 = '09:00', endTime24 = '10:00', description = 'New Event' } = currentEvent;\n\n    return (\n      <div className=\"submission-form\">\n        <h2>{getMonthName(month)} {day} </h2>\n        <p>{submissionType}</p>\n        <form\n          onSubmit={\n            submissionType === 'Create New Event' ?\n              evt => this.handleSubmit(currentEvent, evt) :\n              evt => this.handleUpdate(currentEvent, evt)\n          }\n        >\n          <input\n            className = \"description-input\"\n            type=\"text\"\n            name=\"description\"\n            value={description}\n            placeholder=\"New Event\"\n            default=\"New Event\"\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className = \"time-input\">\n          <label>\n            Start:\n            <input\n              type=\"time\"\n              value={startTime24}\n              default=\"9:00:00\"\n              name=\"startTime24\"\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            End:\n            <input\n              type=\"time\"\n              value={endTime24}\n              default=\"10:00:00\"\n              name=\"endTime24\"\n              onChange={this.handleChange}\n            />\n          </label>\n          </div>\n          <input type=\"submit\" name={buttonText} value={buttonText} />\n          <button onClick={this.handleCancel}>Cancel</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapState = state => ({\n  currentEvent: state.currentEvent\n});\n\nconst mapDispatch = dispatch => ({\n  updateCurrentEvent(event) {\n    dispatch(updateCurrentEvent(event));\n  },\n  postEvent(event) {\n    dispatch(postEvent(event))\n  },\n  editEvent(id, update) {\n    dispatch(editEvent(id, update))\n  },\n  setCurrentEvent(event) {\n    dispatch(setCurrentEvent(event))\n  }\n});\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(Submission);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAXA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAxCA;AAHA;AA+CA;;;;AAlGA;AACA;AAoGA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AACA;AAcA;;;;A","sourceRoot":""}